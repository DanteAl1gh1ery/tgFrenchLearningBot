# handlers.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à—ñ –º–æ–¥—É–ª—ñ
import keyboards
import database

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä, –¥–æ —è–∫–æ–≥–æ –±—É–¥–µ–º–æ –ø—Ä–∏–≤'—è–∑—É–≤–∞—Ç–∏ –≤—Å—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏
router = Router()

# –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞—Å –¥–ª—è —Å—Ç–∞–Ω—ñ–≤ FSM
class AddWord(StatesGroup):
    waiting_for_word = State()
    waiting_for_translation = State()
    waiting_for_transcription = State()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start
@router.message(CommandStart())
async def start_handler(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.full_name}! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –≤–∏–≤—á–∏—Ç–∏ —Å–ª–æ–≤–∞.",
        reply_markup=keyboards.get_main_menu()
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ"
@router.callback_query(F.data == "add_word")
async def start_add_word(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ, —è–∫–µ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏:")
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å–ª–æ–≤–∞
    await state.set_state(AddWord.waiting_for_word)
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä, —â–æ –ª–æ–≤–∏—Ç—å —Å–ª–æ–≤–æ —ñ –ø—Ä–æ—Å–∏—Ç—å –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥
@router.message(AddWord.waiting_for_word)
async def word_entered(message: Message, state: FSMContext):
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–≤–µ–¥–µ–Ω–µ —Å–ª–æ–≤–æ –≤ –ø–∞–º'—è—Ç—å —Å—Ç–∞–Ω—É
    await state.update_data(word=message.text)
    await message.answer("–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥:")
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Å—Ç–∞–Ω
    await state.set_state(AddWord.waiting_for_translation)

# –•–µ–Ω–¥–ª–µ—Ä, —â–æ –ª–æ–≤–∏—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥ —ñ –ø—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é
@router.message(AddWord.waiting_for_translation)
async def translation_entered(message: Message, state: FSMContext):
    await state.update_data(translation=message.text)
    await message.answer("–ú–∞–π–∂–µ –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é:")
    await state.set_state(AddWord.waiting_for_transcription)

# –•–µ–Ω–¥–ª–µ—Ä, —â–æ –ª–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é, –∑–±–µ—Ä—ñ–≥–∞—î –≤—Å–µ –≤ –ë–î —ñ –∑–∞–≤–µ—Ä—à—É—î –¥—ñ–∞–ª–æ–≥
@router.message(AddWord.waiting_for_transcription)
async def transcription_entered(message: Message, state: FSMContext):
    await state.update_data(transcription=message.text)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ
    user_data = await state.get_data()
    user_id = message.from_user.id
    
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –Ω–∞—à—É —Ñ—É–Ω–∫—Ü—ñ—é –∑ —Ñ–∞–π–ª—É database.py
    database.add_word(
        user_id=user_id,
        word=user_data['word'],
        translation=user_data['translation'],
        transcription=message.text  # –º–æ–∂–Ω–∞ –≤–∑—è—Ç–∏ –∑ message.text –∞–±–æ user_data
    )
    
    await message.answer(
        f"‚úÖ –°–ª–æ–≤–æ '{user_data['word']}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!",
        reply_markup=keyboards.get_main_menu() # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∑–Ω–æ–≤—É
    )
    
    # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞–Ω
    await state.clear()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ—ó —Å–ª–æ–≤–∞"
@router.callback_query(F.data == "my_words")
async def show_user_words(callback: CallbackQuery):
    #–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ–ª–±–µ–∫, —â–æ –± –∑–Ω–∏–∫ –≥–æ–¥–∏–Ω–Ω–∏–∫
    await callback.answer()

    user_id = callback.from_user.id
    words = database.get_user_words(user_id)

    if not words:
        await callback.message.answer (
            "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Å–ª—ñ–≤. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚úçÔ∏è –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ', —â–æ–± –ø–æ—á–∞—Ç–∏!"
        )
        return
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–≤—ñ —Å–ø–∏—Å–∫–æ–º —Å–ª—ñ–≤
    response_lines = ["üìö **–í–∞—à—ñ —Å–ª–æ–≤–∞:**\n"]
    for word_data in words:
        # word_data - —Ü–µ –∫–æ—Ä—Ç–µ–∂, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ (1, 'chat', '–∫—ñ—Ç', '[ Éa]')
        num, word, translation, transcription = word_data
        response_lines.append(
            f"{num}. **{word}** - {translation} *[{transcription}]*"
        )
        response_text = "\n".join(response_lines)
        # HTML –ø—Ä–æ—Å—Ç—ñ—à–∏–π —ñ –Ω–∞–¥—ñ–π–Ω—ñ—à–∏–π, –∑–∞–º—ñ–Ω–∏–º–æ –Ω–∞ –Ω—å–æ–≥–æ
        html_response_lines = ["üìö <b>–í–∞—à—ñ —Å–ª–æ–≤–∞:</b>\n"]
        for word_data in words:
            num, word, translation, transcription = word_data
            html_response_lines.append(
            f"{num}. <b>{word}</b> - {translation} <i>[{transcription}]</i>"
        )
    
    await callback.message.answer("\n".join(html_response_lines), parse_mode="HTML")